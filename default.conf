server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    # location / {
    #     root   /usr/local/openresty/nginx/html;
    #     index  index.html index.htm;
    #     if ($http_x_forwarded_proto = 'http') {
    #         return 301 https://$host$request_uri;
    #     }
    # }

location = /verify {
    content_by_lua '
        local cjson = require "cjson"
        local jwt = require "resty.jwt"

        local jwt_token = "eyJ0eXAiOiJKV1QiLCJraWQiOiJiNTJjYjU2OS03NDc0LTQzMTItOTdlYy0xYTQ3NzAxYWM4YWIiLCJhbGciOiJFUzI1NiIsImlzcyI6Imh0dHBzOi8vY29nbml0by1pZHAuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS9hcC1ub3J0aGVhc3QtMV9ncFBDTlpsOWoiLCJjbGllbnQiOiI0cTdzbmRsdGdlZTVpbDkyaGo5YjQzYnM1NCIsInNpZ25lciI6ImFybjphd3M6ZWxhc3RpY2xvYWRiYWxhbmNpbmc6YXAtbm9ydGhlYXN0LTE6OTAzNzc5NDQ4NDI2OmxvYWRiYWxhbmNlci9hcHAvbXlsYi8zMmI1M2MzMmZhNzU0MzkwIiwiZXhwIjoxNTMxNDYzMjI4fQ==.eyJzdWIiOiJjZmU5MWViMy1iNWNiLTQ5NjctOTUzMi02ZDhkYThkNTFiMzciLCJlbWFpbCI6InBhaHVkbmV0QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoiRmFjZWJvb2tfMTAxNTYxMjQ2ODgyMTU0NjkifQ==.h2/jJ8EAqU40dIvm8/oqcCe8pei1Os6dl5cqQUB2HU+fXLBhfAbuP6NOo+T/QI4UV6F1MWi+Z9MwDhWFv70UDA=="
        local jwt_obj = jwt:load_jwt(jwt_token)
        ngx.say(cjson.encode(jwt_obj))
    ';
}

location ~ '^/' {
	default_type "application/json;charset=UTF-8";
        if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
        }
        lua_need_request_body on;
        content_by_lua_block {
            local resp = {headers=nil, body=nil}
            local json_safe = require "cjson.safe"
            local jwt = require "resty.jwt"
            resp.headers = ngx.req.get_headers()
            local body_data = ngx.unescape_uri(ngx.var.request_body)
            local b = json_safe.decode(body_data)
            if not b then
            resp.body = body_data
            else
            resp.body = b
            end
            if resp.headers['x-amzn-oidc-data'] ~= nil then
                local jwt_obj = jwt:load_jwt(resp.headers['x-amzn-oidc-data'])
                resp['amzn-oidc-data'] = jwt_obj
                --resp.oidc = resp.headers['x-amzn-oidc-data']
            end
            resp.httpMethod = ngx.req.get_method()
            resp.queryStringParameters = ngx.req.get_uri_args()
            resp.path = ngx.var.uri
            ngx.print(  json_safe.encode(resp) ) 
        }
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
